#include <iostream>
#include <string>
#include <cctype>
#include <stdexcept>

using namespace std;

enum TokenType { 
    INTEGER, PLUS, MINUS, MUL, DIV, LPAREN, RPAREN, END 
};

struct Token {
    TokenType type;
    int value;

    Token(TokenType t, int v = 0) : type(t), value(v) {}
};

// Lexical Analyzer (Lexer)
class Lexer {
    string text;
    size_t pos;
    char current_char;

public:
    Lexer(string input) : text(input), pos(0) {
        current_char = text[pos];
    }

    void advance() {
        pos++;
        if (pos < text.size())
            current_char = text[pos];
        else
            current_char = '\0';
    }

    void skip_whitespace() {
        while (current_char != '\0' && isspace(current_char)) advance();
    }

    int integer() {
        int result = 0;
        while (current_char != '\0' && isdigit(current_char)) {
            result = result * 10 + (current_char - '0');
            advance();
        }
        return result;
    }

    Token get_next_token() {
        while (current_char != '\0') {

            if (isspace(current_char)) {
                skip_whitespace();
                continue;
            }

            if (isdigit(current_char))
                return Token(INTEGER, integer());

            if (current_char == '+') {
                advance(); return Token(PLUS);
            }

            if (current_char == '-') {
                advance(); return Token(MINUS);
            }

            if (current_char == '*') {
                advance(); return Token(MUL);
            }

            if (current_char == '/') {
                advance(); return Token(DIV);
            }

            if (current_char == '(') {
                advance(); return Token(LPAREN);
            }

            if (current_char == ')') {
                advance(); return Token(RPAREN);
            }

            throw runtime_error("Invalid character");
        }

        return Token(END);
    }
};

// Parser + Evaluator (Recursive Descent)
class Interpreter {
    Lexer lexer;
    Token current_token;

public:
    Interpreter(string input) : lexer(input) {
        current_token = lexer.get_next_token();
    }

    void eat(TokenType type) {
        if (current_token.type == type)
            current_token = lexer.get_next_token();
        else
            throw runtime_error("Syntax error");
    }

    int factor() {
        Token token = current_token;
        if (token.type == INTEGER) {
            eat(INTEGER);
            return token.value;
        } else if (token.type == LPAREN) {
            eat(LPAREN);
            int result = expr();
            eat(RPAREN);
            return result;
        }
        throw runtime_error("Expected number or expression");
    }

    int term() {
        int result = factor();
        while (current_token.type == MUL || current_token.type == DIV) {
            Token token = current_token;
            if (token.type == MUL) {
                eat(MUL);
                result *= factor();
            } else if (token.type == DIV) {
                eat(DIV);
                int divisor = factor();
                if (divisor == 0)
                    throw runtime_error("Division by zero");
                result /= divisor;
            }
        }
        return result;
    }

    int expr() {
        int result = term();
        while (current_token.type == PLUS || current_token.type == MINUS) {
            Token token = current_token;
            if (token.type == PLUS) {
                eat(PLUS);
                result += term();
            } else if (token.type == MINUS) {
                eat(MINUS);
                result -= term();
            }
        }
        return result;
    }
};

int main() {
    string input;
    cout << "Enter arithmetic expression: ";
    getline(cin, input);

    try {
        Interpreter interpreter(input);
        int result = interpreter.expr();
        cout << "Result = " << result << endl;
    } catch (const exception &e) {
        cerr << "Error: " << e.what() << endl;
    }

    return 0;
}
#OUTPUT: Output: The output of this code will be:Enter arithmetic expression: (user input, e.g., 2+3*4)
Result = (calculated result, e.g., 14)
